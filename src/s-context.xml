<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

  <!--<bean id="dataSource" class="net.sf.log4jdbc.sql.jdbcapi.DataSourceSpy">
    <constructor-arg ref="dataSourceSpied"/>
  </bean>-->

  <!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    &lt;!&ndash; Tomcat
    <property name="jndiName" value="java:comp/env/localBulletinJNDI"/>&ndash;&gt;
    &lt;!&ndash; TongWeb5.0&ndash;&gt;
    <property name="jndiName" value="bulletinJNDI"/>
    &lt;!&ndash; Apusic9.0
    <property name="jndiName" value="jdbc/dameng-local"/>&ndash;&gt;
  </bean>-->

  <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
     <property name="driverClass" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
     <property name="jdbcUrl" value="jdbc:log4jdbc:dm://localhost:5236/DAMENG"/>
     <property name="properties">
       <props>
         <prop key="c3p0.acquire_increment">10</prop>
         <prop key="c3p0.idle_test_period">30</prop>
         <prop key="c3p0.max_size">50</prop>
         <prop key="c3p0.max_statements">200</prop>
         <prop key="c3p0.min_size">10</prop>
         <prop key="user">bulletin</prop>
         <prop key="password">1</prop>
       </props>
     </property>
   </bean>-->

  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="com.mysql.jdbc.Driver"/>
    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/all"/>
    <property name="properties">
      <props>
        <prop key="c3p0.acquire_increment">10</prop>
        <prop key="c3p0.idle_test_period">30</prop>
        <prop key="c3p0.max_size">50</prop>
        <prop key="c3p0.max_statements">200</prop>
        <prop key="c3p0.min_size">10</prop>
        <prop key="user">all</prop>
        <prop key="password">all</prop>
      </props>
    </property>
  </bean>

  <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="packagesToScan">
      <list>
        <value>com.cubic.core.entity</value>
        <value>com.cubic.record.entity</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
        <prop key="hibernate.show_sql">false</prop>
        <!-- 开启查询缓存 -->
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <!-- 开启二级缓存 -->
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <!-- 高速缓存提供程序 -->
        <!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
        <prop key="hibernate.cache.region.factory_class">
          org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
        </prop>
      </props>
    </property>
  </bean>

  <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 配置Hibernate事务管理器 -->
  <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <tx:annotation-driven transaction-manager="transactionManager"/>

  <!-- 配置事务异常封装 -->
  <bean id="persistenceExceptionTranslationPostProcessor"
        class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

  <!-- 开启AOP监听 -->
  <aop:aspectj-autoproxy expose-proxy="true"/>

  <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*"/>
      <tx:method name="aj*"/>
      <tx:method name="save*"/>
      <tx:method name="update*"/>
      <tx:method name="modify*"/>
      <tx:method name="edit*"/>
      <tx:method name="delete*"/>
      <tx:method name="remove*"/>
      <tx:method name="repair"/>
      <tx:method name="do*"/>
      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="load*" propagation="SUPPORTS"/>
      <tx:method name="search*" propagation="SUPPORTS"/>
      <tx:method name="*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>

  <aop:config expose-proxy="true">
    <!-- 只对业务逻辑层实施事务 -->
    <aop:pointcut id="txPointcut" expression="execution(* com.cubic.*.*.*.*(..))"/>
    <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
    <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
  </aop:config>

  <context:component-scan base-package="com">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>

  <!-- 支持上传文件 -->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="defaultEncoding" value="UTF-8"/>
    <property name="resolveLazily" value="true"/>
  </bean>

  <!-- cacheManager, 指定ehcache.xml的位置 -->
  <bean id="cacheManagerEhcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="classpath:ehcache.xml"/>
    <!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
    <property name="shared" value="true"/>
  </bean>

  <context:component-scan base-package="com.cubic.core.interceptor"/>

  <!-- 配置eh缓存管理器 -->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

  <!-- 配置一个简单的缓存工厂bean对象 -->
  <bean id="simpleCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheManager" ref="cacheManager"/>
    <!-- 使用缓存 关联ehcache.xml中的缓存配置 -->
    <property name="cacheName" value="mobileCache"/>
  </bean>

  <!-- 配置一个缓存拦截器对象，处理具体的缓存业务 -->
  <bean id="methodCacheInterceptor" class="com.cubic.core.interceptor.MethodCacheInterceptor">
    <property name="cache" ref="simpleCache"/>
  </bean>

  <!-- 参与缓存的切入点对象 (切入点对象，确定何时何地调用拦截器) -->
  <bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    <!-- 配置缓存aop切面 -->
    <property name="advice" ref="methodCacheInterceptor"/>
    <!-- 配置哪些方法参与缓存策略 -->
    <!--
        .表示符合任何单一字元
        ###  +表示符合前一个字元一次或多次
        ###  *表示符合前一个字元零次或多次
        ###  \Escape任何Regular expression使用到的符号
    -->
    <!-- .*表示前面的前缀(包括包名) 表示print方法-->
    <property name="patterns">
      <list>
        <value>com.cubic.*.*Mng*\.getCache*.*</value>
      </list>
    </property>
  </bean>
</beans>